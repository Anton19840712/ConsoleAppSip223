using SIPSorcery.SIP.App;
using SIPSorcery.Media;

namespace ConsoleApp.SipOperations
{
    public class SipCallOperation : ISipOperation
    {
        private readonly SIPUserAgent _userAgent;
        private readonly string _destinationUri;
        private readonly string _username;
        private readonly string _password;
        private readonly VoIPMediaSession _mediaSession;

        public string OperationName => "SIP Call";

        public SipCallOperation(SIPUserAgent userAgent, string destinationUri, string username, string password, VoIPMediaSession mediaSession)
        {
            _userAgent = userAgent;
            _destinationUri = destinationUri;
            _username = username;
            _password = password;
            _mediaSession = mediaSession;
        }

        public async Task<bool> ExecuteAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine($"üìû –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –Ω–∞ {_destinationUri}...");

            try
            {
                Console.WriteLine($"  üë§ –û—Ç –∏–º–µ–Ω–∏: {_username}");
                Console.WriteLine($"  üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞-—Å–µ—Å—Å–∏—é: {_mediaSession.GetType().Name}");

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫
                bool result = await _userAgent.Call(_destinationUri, _username, _password, _mediaSession);

                if (result)
                {
                    Console.WriteLine("  ‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω!");
                    Console.WriteLine("  üì§ SIP INVITE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
                    return true;
                }
                else
                {
                    Console.WriteLine("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ: {ex.Message}");
                return false;
            }
        }
    }
}