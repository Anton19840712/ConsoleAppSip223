using SIPSorcery.SIP;

namespace ConsoleApp.SipOperations
{
    public class SipRegistrationOperation : ISipOperation
    {
        private readonly SIPTransport _sipTransport;
        private readonly string _server;
        private readonly string _username;
        private readonly string _password;

        public string OperationName => "SIP Registration";

        public SipRegistrationOperation(SIPTransport sipTransport, string server, string username, string password)
        {
            _sipTransport = sipTransport;
            _server = server;
            _username = username;
            _password = password;
        }

        public async Task<bool> ExecuteAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine($"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {_username} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {_server}...");

            try
            {
                // –í SIPSorcery —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Call()
                // –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —è–≤–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:

                // –°–æ–∑–¥–∞–µ–º SIP URI –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                var sipUri = SIPURI.ParseSIPURI($"sip:{_username}@{_server}");
                Console.WriteLine($"  üìç SIP URI: {sipUri}");

                // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
                await Task.Delay(500, cancellationToken);

                Console.WriteLine($"  ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                Console.WriteLine($"  üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {_username} (–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç)");

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex.Message}");
                return false;
            }
        }
    }
}