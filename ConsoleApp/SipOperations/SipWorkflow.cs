using ConsoleApp.States;

namespace ConsoleApp.SipOperations
{
    public class SipWorkflow
    {
        private readonly SipStateMachine _stateMachine;
        private readonly List<ISipOperation> _operations;

        public SipStateMachine StateMachine => _stateMachine;

        public SipWorkflow()
        {
            _stateMachine = new SipStateMachine();
            _operations = new List<ISipOperation>();

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            _stateMachine.StateChanged += OnStateChanged;
        }

        public void AddOperation(ISipOperation operation)
        {
            _operations.Add(operation);
        }

        public async Task<bool> ExecuteWorkflowAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ SIP workflow...");

            _stateMachine.Reset();

            try
            {
                foreach (var operation in _operations)
                {
                    Console.WriteLine($"\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {operation.OperationName}");

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                    UpdateStateForOperation(operation);

                    bool success = await operation.ExecuteAsync(cancellationToken);

                    if (!success)
                    {
                        _stateMachine.TransitionTo(SipCallState.Failed);
                        Console.WriteLine($"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è {operation.OperationName} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ");
                        return false;
                    }

                    Console.WriteLine($"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è {operation.OperationName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                }

                Console.WriteLine("\nüéâ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
                return true;
            }
            catch (Exception ex)
            {
                _stateMachine.TransitionTo(SipCallState.Failed);
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ workflow: {ex.Message}");
                return false;
            }
        }

        private void UpdateStateForOperation(ISipOperation operation)
        {
            switch (operation.OperationName)
            {
                case "SIP Registration":
                    _stateMachine.TransitionTo(SipCallState.Registering);
                    break;
                case "SIP Call":
                    _stateMachine.TransitionTo(SipCallState.Calling);
                    break;
            }
        }

        private void OnStateChanged(SipCallState oldState, SipCallState newState)
        {
            Console.WriteLine($"üìä {_stateMachine.GetStateDescription(newState)}");
        }

        public void HandleSipEvent(string eventType)
        {
            switch (eventType)
            {
                case "Registered":
                    _stateMachine.TransitionTo(SipCallState.Registered);
                    break;
                case "Trying":
                    _stateMachine.TransitionTo(SipCallState.Trying);
                    break;
                case "Ringing":
                    _stateMachine.TransitionTo(SipCallState.Ringing);
                    break;
                case "Answered":
                    _stateMachine.TransitionTo(SipCallState.Connected);
                    break;
                case "Failed":
                    _stateMachine.TransitionTo(SipCallState.Failed);
                    break;
                case "Hangup":
                    _stateMachine.TransitionTo(SipCallState.Disconnecting);
                    break;
            }
        }
    }
}