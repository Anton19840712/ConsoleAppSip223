using SIPSorceryMedia.Abstractions;
using System.Collections.Concurrent;

namespace ConsoleApp.WebServer
{
    /// <summary>
    /// Custom AudioSource –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ SIP RTP –ø–æ—Ç–æ–∫
    /// </summary>
    public class BrowserAudioSource : IAudioSource
    {
        private readonly ConcurrentQueue<byte[]> _audioQueue = new();
        private bool _isStarted = false;
        private bool _isPaused = false;
        private Timer? _sendTimer;

        public event EncodedSampleDelegate? OnAudioSourceEncodedSample;
        public event SourceErrorDelegate? OnAudioSourceError;

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π IAudioSource
        public event Action<EncodedAudioFrame>? OnAudioSourceEncodedFrameReady;
        public event RawAudioSampleDelegate? OnAudioSourceRawSample;

        /// <summary>
        /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã - G.711 A-law –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        /// </summary>
        public List<AudioFormat> GetAudioSourceFormats()
        {
            return new List<AudioFormat>
            {
                new AudioFormat(SDPWellKnownMediaFormatsEnum.PCMA), // G.711 A-law (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                new AudioFormat(SDPWellKnownMediaFormatsEnum.PCMU)  // G.711 Œº-law
            };
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        /// </summary>
        public void SetAudioSourceFormat(AudioFormat audioFormat)
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
            if (audioFormat.FormatID == (int)SDPWellKnownMediaFormatsEnum.PCMA)
            {
                _useAlaw = true;
                Console.WriteLine($"üéµ BrowserAudioSource: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç G.711 A-law");
            }
            else
            {
                _useAlaw = false;
                Console.WriteLine($"üéµ BrowserAudioSource: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç G.711 Œº-law");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ RTP –ø–æ—Ç–æ–∫
        /// </summary>
        public Task StartAudio()
        {
            if (_isStarted) return Task.CompletedTask;

            _isStarted = true;
            _isPaused = false;
            Console.WriteLine("üé§ BrowserAudioSource: –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 20ms (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è G.711)
            _sendTimer = new Timer(SendAudioFrame, null, 0, 20);

            return Task.CompletedTask;
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ
        /// </summary>
        public void StopAudio()
        {
            if (!_isStarted) return;

            _isStarted = false;
            _sendTimer?.Dispose();
            _sendTimer = null;

            Console.WriteLine("‚èπÔ∏è BrowserAudioSource: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ");
        }

        /// <summary>
        /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫
        /// </summary>
        public Task CloseAudio()
        {
            StopAudio();
            Console.WriteLine("üîí BrowserAudioSource: –∑–∞–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—É–¥–∏–æ");
            return Task.CompletedTask;
        }

        /// <summary>
        /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ
        /// </summary>
        public Task PauseAudio()
        {
            _isPaused = true;
            Console.WriteLine("‚è∏Ô∏è BrowserAudioSource: –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ");
            return Task.CompletedTask;
        }

        /// <summary>
        /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ
        /// </summary>
        public Task ResumeAudio()
        {
            _isPaused = false;
            Console.WriteLine("‚ñ∂Ô∏è BrowserAudioSource: –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ");
            return Task.CompletedTask;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ
        /// </summary>
        public bool IsAudioSourcePaused()
        {
            return _isPaused;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Å—ç–º–ø–ª—ã
        /// </summary>
        public bool HasEncodedAudioSubscribers()
        {
            return OnAudioSourceEncodedSample != null;
        }

        /// <summary>
        /// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ
        /// </summary>
        public void RestrictFormats(Func<AudioFormat, bool> filter)
        {
            // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
            Console.WriteLine("üîß BrowserAudioSource: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ RAW –∞—É–¥–∏–æ —Å—ç–º–ø–ª—ã
        /// </summary>
        public void ExternalAudioSourceRawSample(AudioSamplingRatesEnum samplingRate, uint durationMilliseconds, short[] samples)
        {
            // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ RAW —Å—ç–º–ø–ª—ã
            Console.WriteLine($"üéµ BrowserAudioSource: –≤–Ω–µ—à–Ω–∏–π RAW —Å—ç–º–ø–ª {samples.Length} —Å–µ–º–ø–ª–æ–≤ @ {samplingRate}");
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        /// </summary>
        /// <param name="audioData">PCM 16-bit –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞</param>
        public void QueueBrowserAudio(byte[] audioData)
        {
            if (!_isStarted)
            {
                Console.WriteLine("‚è∏Ô∏è BrowserAudioSource –Ω–µ –∑–∞–ø—É—â–µ–Ω - –∞—É–¥–∏–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ");
                return;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PCM 16-bit –≤ G.711 Œº-law
            var mulawData = ConvertToPCM(audioData);

            _audioQueue.Enqueue(mulawData);
            Console.WriteLine($"üì¶ BrowserAudioSource: –¥–æ–±–∞–≤–ª–µ–Ω–æ {audioData.Length} –±–∞–π—Ç PCM ‚Üí {mulawData.Length} –±–∞–π—Ç Œº-law (–æ—á–µ—Ä–µ–¥—å: {_audioQueue.Count})");
        }

        private readonly Queue<byte> _continuousAudioBuffer = new();

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∞—É–¥–∏–æ –∫–∞–¥—Ä –≤ RTP –ø–æ—Ç–æ–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 20ms)
        /// </summary>
        private void SendAudioFrame(object? state)
        {
            if (!_isStarted || _isPaused || OnAudioSourceEncodedSample == null) return;

            const int samplesPerFrame = 160; // G.711: 160 samples per 20ms at 8kHz

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –±—É—Ñ–µ—Ä
            while (_audioQueue.TryDequeue(out byte[]? audioData))
            {
                foreach (byte b in audioData)
                {
                    _continuousAudioBuffer.Enqueue(b);
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–¥—Ä –∏–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
            var frame = new byte[samplesPerFrame];
            int bytesRead = 0;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –µ—Å—Ç—å, –±–µ–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
            if (_continuousAudioBuffer.Count >= samplesPerFrame)
            {
                // –ï—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
                for (int i = 0; i < samplesPerFrame; i++)
                {
                    frame[i] = _continuousAudioBuffer.Dequeue();
                    bytesRead++;
                }
            }
            else if (_continuousAudioBuffer.Count > 0)
            {
                // –ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                int availableBytes = _continuousAudioBuffer.Count;
                for (int i = 0; i < availableBytes; i++)
                {
                    frame[i] = _continuousAudioBuffer.Dequeue();
                    bytesRead++;
                }
                // –î–æ–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–∏—à–∏–Ω–æ–π
                Array.Fill(frame, (byte)0xFF, availableBytes, samplesPerFrame - availableBytes);
            }
            else
            {
                // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É
                Array.Fill(frame, (byte)0xFF, 0, samplesPerFrame);
                bytesRead = 0;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤ RTP –ø–æ—Ç–æ–∫
            OnAudioSourceEncodedSample.Invoke(8000, frame);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
            if (_continuousAudioBuffer.Count % 500 == 0 || _continuousAudioBuffer.Count > 2000 || bytesRead == 0)
            {
                Console.WriteLine($"üì° RTP: {bytesRead}/{samplesPerFrame}, –±—É—Ñ–µ—Ä: {_continuousAudioBuffer.Count}, —Å—Ç–∞—Ç—É—Å: {(bytesRead > 0 ? "–ê–£–î–ò–û" : "–¢–ò–®–ò–ù–ê")}");
            }
        }

        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PCM 16-bit –¥–∞–Ω–Ω—ã–µ –≤ G.711 Œº-law —Ñ–æ—Ä–º–∞—Ç
        /// </summary>
        private byte[] ConvertToPCM(byte[] pcmData)
        {
            Console.WriteLine($"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PCM: –ø–æ–ª—É—á–µ–Ω–æ {pcmData.Length} –±–∞–π—Ç");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫—Ä–∞—Ç–Ω—ã 2 (16-bit samples)
            if (pcmData.Length % 2 != 0)
            {
                Console.WriteLine("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä PCM –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º padding");
                Array.Resize(ref pcmData, pcmData.Length + 1);
                pcmData[pcmData.Length - 1] = 0;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ Int16 samples, –∑–∞—Ç–µ–º –≤ G.711 Œº-law
            int sampleCount = pcmData.Length / 2;
            var mulawData = new byte[sampleCount];

            Console.WriteLine($"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {sampleCount} PCM —Å—ç–º–ø–ª–æ–≤ ‚Üí G.711 Œº-law");

            for (int i = 0; i < sampleCount; i++)
            {
                // –ß–∏—Ç–∞–µ–º 16-bit sample (little-endian –æ—Ç JavaScript)
                int byteIndex = i * 2;
                short sample = (short)(pcmData[byteIndex] | (pcmData[byteIndex + 1] << 8));

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–≤—ã—Ö —Å—ç–º–ø–ª–æ–≤
                if (i < 5)
                {
                    Console.WriteLine($"  –°—ç–º–ø–ª {i}: –±–∞–π—Ç—ã [{pcmData[byteIndex]:X2} {pcmData[byteIndex + 1]:X2}] ‚Üí Int16: {sample}");
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ G.711 (Œº-law –∏–ª–∏ A-law –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                mulawData[i] = LinearToG711(sample);
            }

            Console.WriteLine($"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sampleCount} Œº-law –±–∞–π—Ç");
            return mulawData;
        }

        private static bool _useAlaw = false; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞

        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π PCM –≤ G.711 —Ñ–æ—Ä–º–∞—Ç (A-law –∏–ª–∏ Œº-law)
        /// </summary>
        private static byte LinearToG711(short sample)
        {
            return _useAlaw ? LinearToALaw(sample) : LinearToMuLaw(sample);
        }

        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π PCM –≤ G.711 Œº-law —Ñ–æ—Ä–º–∞—Ç (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        /// </summary>
        private static byte LinearToMuLaw(short sample)
        {
            const short BIAS = 0x84;
            const short CLIP = 32635;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫
            bool isNegative = sample < 0;
            if (isNegative) sample = (short)-sample;

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É
            if (sample > CLIP) sample = CLIP;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
            sample = (short)(sample + BIAS);

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç–∞—Ä—à–µ–≥–æ –±–∏—Ç–∞
            int exponent = 7;
            for (int testBit = 0x4000; testBit > 0; testBit >>= 1)
            {
                if ((sample & testBit) != 0) break;
                exponent--;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞–Ω—Ç–∏—Å—Å—É
            int mantissa = (sample >> (exponent + 3)) & 0x0F;

            // –§–æ—Ä–º–∏—Ä—É–µ–º Œº-law –±–∞–π—Ç
            byte result = (byte)((exponent << 4) | mantissa);

            // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫
            result = (byte)~result;
            if (!isNegative) result |= 0x80;

            return result;
        }

        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π PCM –≤ G.711 A-law —Ñ–æ—Ä–º–∞—Ç
        /// </summary>
        private static byte LinearToALaw(short sample)
        {
            const short CLIP = 32635;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫
            bool isNegative = sample < 0;
            if (isNegative) sample = (short)-sample;

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É
            if (sample > CLIP) sample = CLIP;

            // A-law –∫–æ–º–ø—Ä–µ—Å—Å–∏—è
            byte result;
            if (sample < 256)
            {
                result = (byte)(sample >> 4);
            }
            else
            {
                int exponent = 7;
                for (int testBit = 0x4000; testBit > 0; testBit >>= 1)
                {
                    if ((sample & testBit) != 0) break;
                    exponent--;
                }

                int mantissa = (sample >> (exponent + 3)) & 0x0F;
                result = (byte)(((exponent - 1) << 4) | mantissa);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –∏ XOR —Å 0x55
            if (!isNegative) result |= 0x80;
            return (byte)(result ^ 0x55);
        }

        public void Dispose()
        {
            StopAudio();
        }
    }
}