namespace ConsoleApp.States
{
    public class SipStateMachine
    {
        private SipCallState _currentState = SipCallState.Idle;

        public SipCallState CurrentState => _currentState;

        public event Action<SipCallState, SipCallState>? StateChanged;

        public bool CanTransitionTo(SipCallState newState)
        {
            return newState switch
            {
                SipCallState.Idle => true, // –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Idle

                SipCallState.Registering => _currentState == SipCallState.Idle,

                SipCallState.Registered => _currentState == SipCallState.Registering,

                SipCallState.Calling => _currentState == SipCallState.Registered,

                SipCallState.Trying => _currentState == SipCallState.Calling,

                SipCallState.Ringing => _currentState == SipCallState.Trying,

                SipCallState.Connected => _currentState == SipCallState.Ringing,

                SipCallState.Disconnecting => _currentState == SipCallState.Connected ||
                                             _currentState == SipCallState.Ringing ||
                                             _currentState == SipCallState.Trying,

                SipCallState.Failed => _currentState != SipCallState.Idle &&
                                      _currentState != SipCallState.Finished,

                SipCallState.Finished => _currentState == SipCallState.Disconnecting,

                _ => false
            };
        }

        public bool TransitionTo(SipCallState newState)
        {
            if (!CanTransitionTo(newState))
            {
                Console.WriteLine($"‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {_currentState} ‚Üí {newState}");
                return false;
            }

            var oldState = _currentState;
            _currentState = newState;

            Console.WriteLine($"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {oldState} ‚Üí {newState}");
            StateChanged?.Invoke(oldState, newState);

            return true;
        }

        public void Reset()
        {
            TransitionTo(SipCallState.Idle);
        }

        public string GetStateDescription(SipCallState state)
        {
            return state switch
            {
                SipCallState.Idle => "–û–∂–∏–¥–∞–Ω–∏–µ",
                SipCallState.Registering => "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ SIP —Å–µ—Ä–≤–µ—Ä–µ",
                SipCallState.Registered => "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≥–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫—É",
                SipCallState.Calling => "–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞",
                SipCallState.Trying => "–°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å",
                SipCallState.Ringing => "–ó–≤–æ–Ω–æ–∫ —É –∞–±–æ–Ω–µ–Ω—Ç–∞",
                SipCallState.Connected => "–†–∞–∑–≥–æ–≤–æ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
                SipCallState.Disconnecting => "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞",
                SipCallState.Failed => "–û—à–∏–±–∫–∞",
                SipCallState.Finished => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            };
        }
    }
}