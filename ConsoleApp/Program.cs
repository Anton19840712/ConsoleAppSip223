// SIP (Session Initiation Protocol) - –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–µ–∞–Ω—Å–æ–≤ —Å–≤—è–∑–∏
using SIPSorcery.SIP;
using SIPSorcery.SIP.App;
using SIPSorcery.Media;
using SIPSorceryMedia.Abstractions;
using ConsoleApp.EventHandlers;
using ConsoleApp.CleanupHandlers;
using ConsoleApp.SipOperations;
using ConsoleApp.Configuration;
using ConsoleApp.WebServer;
using ConsoleApp.Services;
using ConsoleApp.DependencyInjection;
using ConsoleApp.States;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

class SafeSipCaller
{
	private static AppConfiguration _config = new();
	private static ServiceProvider? _serviceProvider;
	private static ILoggingService? _loggingService;

	// SIP Transport - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π –¥–ª—è SIP —Å–æ–æ–±—â–µ–Ω–∏–π (UDP/TCP)
	private static SIPTransport? _sipTransport;
	// SIP User Agent - –∞–≥–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π SIP —Å–µ—Å—Å–∏—è–º–∏
	private static SIPUserAgent? _userAgent;
	// VoIP (Voice over IP) - –≥–æ–ª–æ—Å–æ–≤–∞—è —Å–≤—è–∑—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ—Ç–æ–∫–æ–ª
	private static VoIPMediaSession? _mediaSession;
	private static bool _callActive = false;
	private static Timer? _forceExitTimer;
	private static SipEventHandler? _eventChain;
	private static CleanupHandler? _cleanupChain;
	private static SipWorkflow? _workflow;
	// Web Server –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
	private static SimpleHttpServer? _webServer;
	// Custom AudioSource –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∞—É–¥–∏–æ –≤ SIP
	private static BrowserAudioSource? _browserAudioSource;
	// –¢–µ—Å—Ç–æ–≤—ã–π AudioSource –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–∞—á–∏
	private static TestAudioSource? _testAudioSource;
	// TTS AudioSource –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
	private static TtsAudioSource? _ttsAudioSource;
	// WAV AudioSource –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
	private static WavAudioSource? _wavAudioSource;
	// –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	private static bool _isTestMode = false;
	// –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ TTS
	private static bool _isTtsMode = false;
	// –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ WAV
	private static bool _isWavMode = false;

	/// <summary>
	/// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SIP –∑–≤–æ–Ω–∫–∞
	/// </summary>
	/// <param name="args">–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏</param>
	static async Task Main(string[] args)
	{
		try
		{
			LoadConfiguration();
			ConfigureDependencyInjection();
			_loggingService = _serviceProvider!.GetRequiredService<ILoggingService>();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {ex.Message}");
			Console.WriteLine($"Stack trace: {ex.StackTrace}");
			Console.ReadLine();
			return;
		}


		try
		{
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
			bool isWavTest = _config.IsWavTest;
			_loggingService.LogInfo($"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
			_loggingService.LogInfo($"‚ïë   –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´: {(isWavTest ? "WAV TEST (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤)" : "PRODUCTION (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–≤–æ–Ω–∫–∏)"),-40} ‚ïë");
			_loggingService.LogInfo($"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

			if (isWavTest)
			{
				_loggingService.LogInfo("üìä WAV TEST –†–ï–ñ–ò–ú:");
				_loggingService.LogInfo("   - –û–±—Ä–∞–±–æ—Ç–∫–∞ WAV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞");
				_loggingService.LogInfo("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫");
				_loggingService.LogInfo("   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–≤—É–∫–∞");
			}
			else
			{
				_loggingService.LogInfo("üéôÔ∏è PRODUCTION –†–ï–ñ–ò–ú:");
				_loggingService.LogInfo("   - UI –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
				_loggingService.LogInfo("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ—Å—Ç–æ–≤");
				_loggingService.LogInfo("   - –ü–µ—Ä–µ–¥–∞—á–∞ –≥–æ–ª–æ—Å–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
			}

			_loggingService.LogInfo("–°–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–µ—Å—Ç–µ)");
			_loggingService.LogInfo($"–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {_config.SipConfiguration.Server} (5.135.215.43)");

			// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
			await StartWebServer();

			using (var cts = new CancellationTokenSource(_config.CallSettings.GeneralTimeoutMs))
			{
				await RunSafeCall(cts.Token);
			}
		}
		catch (OperationCanceledException)
		{
			_loggingService.LogWarning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É");
		}
		catch (Exception ex)
		{
			_loggingService.LogError($"–û—à–∏–±–∫–∞: {ex.Message}", ex);
		}
		finally
		{
			_loggingService.LogInfo("–ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...");
			SafeCleanup();
			StopWebServer();
			_loggingService.LogInfo("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞
			if (_isWavMode)
			{
				await AnalyzeTransmittedAudio();
			}

			_forceExitTimer?.Dispose();
			_loggingService.LogInfo("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ENTER –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã...");

			// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥
			var exitTask = Task.Run(() => Console.ReadLine());
			var timeoutTask = Task.Delay(3000);
			await Task.WhenAny(exitTask, timeoutTask);

			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã DI
			_serviceProvider?.Dispose();
		}
	}

	/// <summary>
	/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	/// </summary>
	private static void ConfigureDependencyInjection()
	{
		var services = new ServiceCollection();

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		var builder = new ConfigurationBuilder()
			.SetBasePath(Directory.GetCurrentDirectory())
			.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

		var configuration = builder.Build();
		services.AddSingleton<IConfiguration>(configuration);

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
		services.AddApplicationServices(configuration);

		_serviceProvider = services.BuildServiceProvider();
	}

	/// <summary>
	/// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
	/// </summary>
	private static async Task StartWebServer()
	{
		try
		{
			_webServer = _serviceProvider!.GetRequiredService<SimpleHttpServer>();

			// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
			_webServer.OnAudioDataReceived += (audioData) =>
			{
				_loggingService!.LogDebug($"–ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞: {audioData.Length} –±–∞–π—Ç");
				// –ó–¥–µ—Å—å –±—É–¥–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å SIP –º–µ–¥–∏–∞-—Å–µ—Å—Å–∏–µ–π
				ProcessBrowserAudio(audioData);
			};

			// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
			_webServer.OnCallRequested += (action) =>
			{
				_loggingService!.LogInfo($"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∑–≤–æ–Ω–∫–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞: {action}");
				ProcessBrowserCallRequest(action);
			};

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			_webServer.SetRegistrationStatusProvider(() =>
			{
				if (_workflow?.StateMachine != null)
				{
					var currentState = _workflow.StateMachine.CurrentState;
					var isRegistered = currentState == SipCallState.Registered;
					var description = _workflow.StateMachine.GetStateDescription(currentState);

					return new {
						isRegistered = isRegistered,
						currentState = currentState.ToString(),
						description = description
					};
				}
				else
				{
					return new {
						isRegistered = false,
						currentState = "Unknown",
						description = "Workflow –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
					};
				}
			});

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
			_webServer.SetCallStatusProvider(() =>
			{
				if (_userAgent != null)
				{
					var isActive = _userAgent.IsCallActive;
					var currentState = _callActive ? "Connected" : (_userAgent.IsCallActive ? "Active" : "Idle");
					var description = isActive ? "–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω" : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞";

					return new {
						isActive,
						currentState,
						description,
						callActive = _callActive
					};
				}
				else
				{
					return new {
						isActive = false,
						currentState = "Idle",
						description = "UserAgent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
						callActive = false
					};
				}
			});

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
			_ = Task.Run(() => _webServer.StartAsync());

			_loggingService!.LogInfo("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8081/");

			// –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
			await Task.Delay(1000); // –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
			// OpenBrowser("http://localhost:8081/");
			_loggingService.LogInfo("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ (–±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)");
		}
		catch (Exception ex)
		{
			_loggingService!.LogError($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {ex.Message}", ex);
		}
	}

	/// <summary>
	/// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
	/// </summary>
	private static void StopWebServer()
	{
		try
		{
			_webServer?.Dispose();
			_loggingService!.LogInfo("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
		}
		catch (Exception ex)
		{
			_loggingService!.LogError($"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {ex.Message}", ex);
		}
	}

	/// <summary>
	/// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º URL –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –æ–∫–Ω–µ
	/// </summary>
	/// <param name="url">URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è</param>
	private static void OpenBrowser(string url)
	{
		try
		{
			var processStartInfo = new System.Diagnostics.ProcessStartInfo();

			if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Windows))
			{
				// Windows: –æ—Ç–∫—Ä—ã–≤–∞–µ–º Chrome —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –æ–∫–Ω–æ–º 400x600
				var chromeArgs = $"--new-window --window-size=400,600 --window-position=100,100 \"{url}\"";
				processStartInfo.FileName = "chrome";
				processStartInfo.Arguments = chromeArgs;
				processStartInfo.UseShellExecute = false;

				try
				{
					System.Diagnostics.Process.Start(processStartInfo);
				}
				catch
				{
					// Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
					processStartInfo.FileName = url;
					processStartInfo.Arguments = "";
					processStartInfo.UseShellExecute = true;
					System.Diagnostics.Process.Start(processStartInfo);
				}
			}
			else if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.OSX))
			{
				// macOS: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ Safari –∏–ª–∏ Chrome
				processStartInfo.FileName = "open";
				processStartInfo.Arguments = $"-a \"Google Chrome\" --args --new-window --window-size=400,600 \"{url}\"";
				processStartInfo.UseShellExecute = false;
				System.Diagnostics.Process.Start(processStartInfo);
			}
			else
			{
				// Linux: –∏—Å–ø–æ–ª—å–∑—É–µ–º xdg-open
				processStartInfo.FileName = "xdg-open";
				processStartInfo.Arguments = url;
				processStartInfo.UseShellExecute = false;
				System.Diagnostics.Process.Start(processStartInfo);
			}
		}
		catch (Exception ex)
		{
			_loggingService!.LogWarning($"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {ex.Message}");
			_loggingService.LogInfo("–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤—Ä—É—á–Ω—É—é: http://localhost:8081/");
		}
	}

	/// <summary>
	/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
	/// </summary>
	/// <param name="audioData">–ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PCM 16-bit (–∏–∑ Web Audio API)</param>
	private static void ProcessBrowserAudio(byte[] audioData)
	{
		try
		{
			_loggingService!.LogDebug($"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ: {audioData.Length} –±–∞–π—Ç PCM 16-bit");
			_loggingService.LogDebug($"–°–æ—Å—Ç–æ—è–Ω–∏–µ: _callActive={_callActive}, _mediaSession={(_mediaSession != null ? "–µ—Å—Ç—å" : "null")}");

			if (_browserAudioSource != null)
			{
				// –ü–µ—Ä–µ–¥–∞–µ–º –∞—É–¥–∏–æ –≤ BrowserAudioSource –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ RTP
				_browserAudioSource.QueueBrowserAudio(audioData);
				_loggingService.LogDebug("–ê—É–¥–∏–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ BrowserAudioSource –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
			}
			else
			{
				_loggingService.LogWarning("BrowserAudioSource –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
			}
		}
		catch (Exception ex)
		{
			_loggingService!.LogError($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∞—É–¥–∏–æ: {ex.Message}", ex);
		}
	}

	/// <summary>
	/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
	/// </summary>
	/// <param name="action">–î–µ–π—Å—Ç–≤–∏–µ: "start" –∏–ª–∏ "hangup"</param>
	private static void ProcessBrowserCallRequest(string action)
	{
		try
		{
			switch (action.ToLower())
			{
				case "start":
					_loggingService!.LogInfo("–ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞...");
					if (_userAgent != null && _mediaSession != null && !_userAgent.IsCallActive)
					{
						string uri = $"sip:{_config.SipConfiguration.DestinationUser}@{_config.SipConfiguration.Server}";

						// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "Calling" –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–≤–æ–Ω–∫–∞
						_workflow?.HandleSipEvent("Calling");

						// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
						_ = Task.Run(async () =>
						{
							try
							{
								await _userAgent.Call(uri, _config.SipConfiguration.CallerUsername, _config.SipConfiguration.CallerPassword, _mediaSession);
								_loggingService.LogInfo($"–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ {uri}");
							}
							catch (Exception ex)
							{
								_loggingService.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ: {ex.Message}");
							}
						});
					}
					else
					{
						_loggingService!.LogWarning("–ó–≤–æ–Ω–æ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞");
					}
					break;

				case "hangup":
					_loggingService!.LogInfo("–ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞...");
					if (_userAgent != null && _userAgent.IsCallActive)
					{
						_userAgent.Hangup();
						_loggingService.LogInfo("–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω");
					}
					else
					{
						_loggingService.LogWarning("–ê–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
					}
					break;

				default:
					_loggingService!.LogWarning($"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–≤–æ–Ω–∫–∞: {action}");
					break;
			}
		}
		catch (Exception ex)
		{
			_loggingService!.LogError($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∑–≤–æ–Ω–∫–∞: {ex.Message}", ex);
		}
	}

	/// <summary>
	/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SIP –∑–≤–æ–Ω–æ–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
	/// </summary>
	/// <param name="cancellationToken">–¢–æ–∫–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
	private static async Task RunSafeCall(CancellationToken cancellationToken)
	{
		_loggingService!.LogInfo($"–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ SIP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ç–∞–π–º–∞—É—Ç {_config.CallSettings.TransportTimeoutMs / 1000}—Å)...");
		await RunWithTimeout(async () => {
			_sipTransport = new SIPTransport();
			await Task.Delay(100);
			_loggingService.LogInfo("SIP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω");
		}, _config.CallSettings.TransportTimeoutMs, cancellationToken);

		// –°–æ–∑–¥–∞–µ–º –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞—É–¥–∏–æ –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
		_loggingService.LogInfo($"–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-—Å–µ—Å—Å–∏–∏ (—Ç–∞–π–º–∞—É—Ç {_config.CallSettings.MediaTimeoutMs / 1000}—Å)...");
		await RunWithTimeout(async () => {
			// –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∞—É–¥–∏–æ
			_browserAudioSource = _serviceProvider!.GetRequiredService<BrowserAudioSource>();
			_testAudioSource = _serviceProvider!.GetRequiredService<TestAudioSource>();
			_ttsAudioSource = _serviceProvider!.GetRequiredService<TtsAudioSource>();
			_wavAudioSource = _serviceProvider!.GetRequiredService<WavAudioSource>();

			// –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
			IAudioSource audioSource;
			bool isWavTest = _config.IsWavTest;

			if (isWavTest)
			{
				// –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º WAV –∏—Å—Ç–æ—á–Ω–∏–∫
				_isWavMode = true;
				audioSource = _wavAudioSource;
				_loggingService.LogInfo("WAV TEST: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WavAudioSource –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ privet.wav");
			}
			else
			{
				// –í production —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Browser –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
				_isWavMode = false;
				_isTtsMode = false;
				_isTestMode = false;
				audioSource = _browserAudioSource;
				_loggingService.LogInfo("PRODUCTION: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è BrowserAudioSource —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏");
			}

			_loggingService.LogInfo("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω—ã –≤—Å–µ AudioSource (Browser, Test, TTS, WAV)");

			// –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-—Å–µ—Å—Å–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
			var mediaEndPoints = new MediaEndPoints
			{
				AudioSource = audioSource
			};
			_mediaSession = new VoIPMediaSession(mediaEndPoints);

			// –î–æ–±–∞–≤–ª—è–µ–º bandwidth control —á–µ—Ä–µ–∑ SIPSorcery API
			if (_mediaSession.AudioLocalTrack != null)
			{
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TIAS bandwidth (Transport Independent Application Specific)
				_mediaSession.AudioLocalTrack.MaximumBandwidth = 64000; // 64000 bps = 64 kbps
				_loggingService.LogInfo("‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω bandwidth control: b=TIAS:64000 (64 kbps)");
			}
			else
			{
				_loggingService.LogWarning("AudioLocalTrack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, bandwidth control –ø—Ä–æ–ø—É—â–µ–Ω");
			}

			// TODO: –î–æ–±–∞–≤–∏—Ç—å RTCP —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API SIPSorcery
			_loggingService.LogInfo("TODO: –î–æ–±–∞–≤–∏—Ç—å RTCP –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞");

			_loggingService.LogInfo($"–ú–µ–¥–∏–∞-—Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º: {(isWavTest ? "WavAudioSource" : "BrowserAudioSource")}!");

			await Task.Delay(100);
		}, _config.CallSettings.MediaTimeoutMs, cancellationToken);

		_loggingService.LogInfo($"–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ User Agent (—Ç–∞–π–º–∞—É—Ç {_config.CallSettings.UserAgentTimeoutMs / 1000}—Å)...");
		await RunWithTimeout(async () => {
			_userAgent = new SIPUserAgent(_sipTransport, null);

			// TODO: –î–æ–±–∞–≤–∏—Ç—å session timers —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API SIPSorcery
			_loggingService.LogInfo("TODO: –î–æ–±–∞–≤–∏—Ç—å session timers –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏");

			// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chain of Responsibility –¥–ª—è —Å–æ–±—ã—Ç–∏–π
			SetupEventChain();

			_userAgent.ClientCallAnswered += async (uac, resp) => {
				_eventChain?.Handle("Answered", resp);
				_workflow?.HandleSipEvent("Answered");
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
				_callActive = true;
				_loggingService.LogInfo("_callActive = true - –∑–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ!");

				// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π AudioSource –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –≤ SIP
				if (_isTestMode && _testAudioSource != null)
				{
					await _testAudioSource.StartAudio();
					_loggingService.LogInfo("TestAudioSource –∑–∞–ø—É—â–µ–Ω - –ø–µ—Ä–µ–¥–∞—á–∞ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–Ω–æ–≤!");
				}
				else if (_isTtsMode && _ttsAudioSource != null)
				{
					await _ttsAudioSource.StartAudio();
					_loggingService.LogInfo("TtsAudioSource –∑–∞–ø—É—â–µ–Ω - –ø–µ—Ä–µ–¥–∞—á–∞ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—á–∏!");
				}
				else if (_isWavMode && _wavAudioSource != null)
				{
					await _wavAudioSource.StartAudio();
					_loggingService.LogInfo("WavAudioSource –∑–∞–ø—É—â–µ–Ω - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ WAV —Ñ–∞–π–ª–æ–≤!");
				}
				else if (!_isTestMode && !_isTtsMode && !_isWavMode && _browserAudioSource != null)
				{
					await _browserAudioSource.StartAudio();
					_loggingService.LogInfo("BrowserAudioSource –∑–∞–ø—É—â–µ–Ω - –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –∞—É–¥–∏–æ!");
				}
			};

			_userAgent.ClientCallFailed += (uac, err, resp) => {
				_eventChain?.Handle("Failed", (err, resp));
				_workflow?.HandleSipEvent("Failed");
			};

			_userAgent.ClientCallRinging += (uac, resp) => {
				_eventChain?.Handle("Ringing", resp);
				_workflow?.HandleSipEvent("Ringing");
			};

			_userAgent.ClientCallTrying += (uac, resp) => {
				_eventChain?.Handle("Trying", resp);
				_workflow?.HandleSipEvent("Trying");
			};

			_userAgent.OnCallHungup += (dlg) => {
				_eventChain?.Handle("Hangup", dlg);
				_workflow?.HandleSipEvent("Hangup");
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
				_callActive = false;
				_loggingService.LogInfo("_callActive = false - –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω");

				// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π AudioSource
				if (_isTestMode && _testAudioSource != null)
				{
					_testAudioSource.StopAudio();
					_loggingService.LogInfo("TestAudioSource –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
				}
				else if (_isTtsMode && _ttsAudioSource != null)
				{
					_ttsAudioSource.StopAudio();
					_loggingService.LogInfo("TtsAudioSource –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
				}
				else if (_isWavMode && _wavAudioSource != null)
				{
					_wavAudioSource.StopAudio();
					_loggingService.LogInfo("WavAudioSource –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
				}
				else if (!_isTestMode && !_isTtsMode && !_isWavMode && _browserAudioSource != null)
				{
					_browserAudioSource.StopAudio();
					_loggingService.LogInfo("BrowserAudioSource –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
				}
			};

			_loggingService.LogInfo("–°–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ Chain of Responsibility");

			// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ workflow
			SetupWorkflow();

			await Task.Delay(100);
			_loggingService.LogInfo("User Agent —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
		}, _config.CallSettings.UserAgentTimeoutMs, cancellationToken);

		_loggingService.LogInfo("–®–∞–≥ 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SIP Workflow (—Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)...");
		await RunWithTimeout(async () => {
			if (_workflow != null)
			{
				_loggingService.LogInfo("–ó–∞–ø—É—Å–∫ SIP –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Workflow...");
				bool workflowResult = await _workflow.ExecuteWorkflowAsync(cancellationToken);

				if (workflowResult)
				{
					_loggingService.LogInfo("Workflow –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
					_loggingService.LogInfo("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + _workflow.StateMachine.GetStateDescription(_workflow.StateMachine.CurrentState));
				}
				else
				{
					throw new Exception("Workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ");
				}
			}
			else
			{
				throw new Exception("Workflow –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
			}
		}, _config.CallSettings.CallTimeoutMs, cancellationToken);

		_loggingService.LogInfo("–®–∞–≥ 5: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8081/");

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
		bool isWavTest = _config.IsWavTest;

		_loggingService.LogInfo("");
		_loggingService.LogInfo("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");

		if (isWavTest)
		{
			_loggingService.LogInfo("‚ïë   –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö: WAV TEST (—Ç–µ—Å—Ç —Ñ–∞–π–ª–æ–≤)           ‚ïë");
			_loggingService.LogInfo("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
			_loggingService.LogInfo("");
			_loggingService.LogInfo("üìä –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WAV:");
			_loggingService.LogInfo("   - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ WAV —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SIP");
			_loggingService.LogInfo("   - –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–∞—á–∏");
			_loggingService.LogInfo("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");

			// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ WAV TEST —Ä–µ–∂–∏–º–µ
			_loggingService.LogInfo("");
			_loggingService.LogInfo("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–≤–æ–Ω–∫–æ–º...");
			await Task.Delay(2000, cancellationToken);

			_loggingService.LogInfo("üìû –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å WAV —Ñ–∞–π–ª–æ–º...");

			if (_userAgent != null && _mediaSession != null)
			{
				string uri = $"sip:{_config.SipConfiguration.DestinationUser}@{_config.SipConfiguration.Server}";
				try
				{
					_workflow?.HandleSipEvent("Calling");
					await _userAgent.Call(uri, _config.SipConfiguration.CallerUsername, _config.SipConfiguration.CallerPassword, _mediaSession);
					_loggingService.LogInfo($"‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ {uri}");
				}
				catch (Exception ex)
				{
					_loggingService.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ: {ex.Message}");
				}
			}
		}
		else
		{
			_loggingService.LogInfo("‚ïë   –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö: PRODUCTION (—Ä–µ–∞–ª—å–Ω—ã–µ –∑–≤–æ–Ω–∫–∏)     ‚ïë");
			_loggingService.LogInfo("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
			_loggingService.LogInfo("");
			_loggingService.LogInfo("üéôÔ∏è Production —Ä–µ–∂–∏–º:");
			_loggingService.LogInfo("   - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8081/");
			_loggingService.LogInfo("   - –ü–µ—Ä–µ–¥–∞—á–∞ –≥–æ–ª–æ—Å–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
			_loggingService.LogInfo("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
			_loggingService.LogInfo("");
			_loggingService.LogInfo("üëâ –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ UI");
		}

		// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
		_loggingService.LogInfo("");
		_loggingService.LogInfo("‚è∏Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.");

		while (!cancellationToken.IsCancellationRequested)
		{
			if (_callActive)
			{
				// –ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
				await Task.Delay(5000, cancellationToken);
			}
			else
			{
				// –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
				await Task.Delay(1000, cancellationToken);
			}
		}
	}


	/// <summary>
	/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
	/// </summary>
	/// <param name="operation">–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</param>
	/// <param name="timeoutMs">–¢–∞–π–º–∞—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö</param>
	/// <param name="cancellationToken">–¢–æ–∫–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
	/// <exception cref="TimeoutException">–í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞</exception>
	private static async Task RunWithTimeout(Func<Task> operation, int timeoutMs, CancellationToken cancellationToken)
	{
		using (var timeoutCts = new CancellationTokenSource(timeoutMs))
		using (var combinedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, timeoutCts.Token))
		{
			try
			{
				await operation().WaitAsync(combinedCts.Token);
			}
			catch (OperationCanceledException) when (timeoutCts.Token.IsCancellationRequested)
			{
				throw new TimeoutException($"–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeoutMs}ms");
			}
		}
	}

	/// <summary>
	/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ SIP —Å–æ–±—ã—Ç–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É Chain of Responsibility
	/// </summary>
	private static void SetupEventChain()
	{
		var trying = _serviceProvider!.GetRequiredService<ILoggerFactory>().CreateLogger<TryingEventHandler>();
		var tryingHandler = new TryingEventHandler(trying);

		// –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
		// –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ trying handler
		_eventChain = tryingHandler;
	}

	/// <summary>
	/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å SIP –æ–ø–µ—Ä–∞—Ü–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–≤–æ–Ω–æ–∫)
	/// </summary>
	private static void SetupWorkflow()
	{
		_workflow = _serviceProvider!.GetRequiredService<SipWorkflow>();

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ workflow - —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–≤–æ–Ω–∫–∞
		if (_sipTransport != null)
		{
			var registrationOp = new SipRegistrationOperation(_sipTransport, _config.SipConfiguration.Server, _config.SipConfiguration.CallerUsername, _config.SipConfiguration.CallerPassword);
			_workflow.AddOperation(registrationOp);
		}

		// –£–ë–ò–†–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω–æ–∫ –∏–∑ workflow - –∑–≤–æ–Ω–∫–∏ –±—É–¥—É—Ç —á–µ—Ä–µ–∑ UI
		// if (_userAgent != null && _mediaSession != null)
		// {
		// 	string uri = $"sip:{_config.SipConfiguration.DestinationUser}@{_config.SipConfiguration.Server}";
		// 	var callOp = new SipCallOperation(_userAgent, uri, _config.SipConfiguration.CallerUsername, _config.SipConfiguration.CallerPassword, _mediaSession);
		// 	_workflow.AddOperation(callOp);
		// }

		_loggingService!.LogInfo("SIP Workflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–≤–æ–Ω–∫–∞)");
	}

	/// <summary>
	/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ appsettings.json
	/// </summary>
	private static void LoadConfiguration()
	{
		try
		{
			var configuration = new ConfigurationBuilder()
				.SetBasePath(Directory.GetCurrentDirectory())
				.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
				.Build();

			_config = new AppConfiguration();
			configuration.Bind(_config);

		}
		catch (Exception ex)
		{
		}
	}

	/// <summary>
	/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
	/// </summary>
	private static void SetupCleanupChain()
	{
		var callLogger = _serviceProvider!.GetRequiredService<ILoggerFactory>().CreateLogger<CallCleanupHandler>();
		var transportLogger = _serviceProvider!.GetRequiredService<ILoggerFactory>().CreateLogger<TransportCleanupHandler>();

		var callCleanup = new CallCleanupHandler(_userAgent, callLogger);
		var transportCleanup = new TransportCleanupHandler(_sipTransport, transportLogger);

		callCleanup.SetNext(transportCleanup);
		_cleanupChain = callCleanup;
	}

	/// <summary>
	/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö SIP —Ä–µ—Å—É—Ä—Å–æ–≤
	/// </summary>
	private static void SafeCleanup()
	{
		try
		{
			_loggingService!.LogInfo("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...");

			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
			if (_webServer != null)
			{
				_webServer.Dispose();
				_webServer = null;
				_loggingService.LogInfo("WebServer –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
			}

			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º BrowserAudioSource
			if (_browserAudioSource != null)
			{
				_browserAudioSource.Dispose();
				_browserAudioSource = null;
				_loggingService.LogInfo("BrowserAudioSource –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
			}

			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º TestAudioSource
			if (_testAudioSource != null)
			{
				_testAudioSource.Dispose();
				_testAudioSource = null;
				_loggingService.LogInfo("TestAudioSource –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
			}

			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º TtsAudioSource
			if (_ttsAudioSource != null)
			{
				_ttsAudioSource.Dispose();
				_ttsAudioSource = null;
				_loggingService.LogInfo("TtsAudioSource –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
			}

			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º WavAudioSource
			if (_wavAudioSource != null)
			{
				_wavAudioSource.Dispose();
				_wavAudioSource = null;
				_loggingService.LogInfo("WavAudioSource –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
			}

			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ–¥–∏–∞-—Å–µ—Å—Å–∏—é
			if (_mediaSession != null)
			{
				try
				{
					_mediaSession.Close("cleanup");
					((IDisposable)_mediaSession)?.Dispose();
				}
				catch (Exception ex)
				{
					_loggingService.LogError($"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è MediaSession: {ex.Message}");
				}
				_mediaSession = null;
				_loggingService.LogInfo("MediaSession –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞");
			}

			// –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è SIP —Ä–µ—Å—É—Ä—Å–æ–≤
			SetupCleanupChain();
			_cleanupChain?.Cleanup();

			// –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫–∏
			_userAgent = null;
			_sipTransport = null;
			_callActive = false;

			_loggingService!.LogInfo("–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã");
		}
		catch (Exception ex)
		{
			_loggingService!.LogError($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {ex.Message}", ex);
		}
	}

	/// <summary>
	/// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —ç—Ç–∞–ª–æ–Ω–æ–º
	/// </summary>
	private static async Task AnalyzeTransmittedAudio()
	{
		try
		{
			var projectRoot = Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, @"..\..\..\"));
			var wavDir = Path.Combine(projectRoot, "TestWavFiles");
			var transmittedWav = Path.Combine(wavDir, "privet_transmitted.wav");
			var referenceJson = Path.Combine(wavDir, "privet_reference.json");
			var transmittedJson = Path.Combine(wavDir, "privet_transmitted.json");

			_loggingService!.LogInfo("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
			_loggingService.LogInfo("‚ïë     –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–î–ê–ù–ù–û–ì–û –ê–£–î–ò–û                               ‚ïë");
			_loggingService.LogInfo("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
			if (!File.Exists(transmittedWav))
			{
				_loggingService.LogWarning($"–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {transmittedWav}");
				return;
			}

			_loggingService.LogInfo($"‚úì –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {Path.GetFileName(transmittedWav)}");
			_loggingService.LogInfo($"‚úì –†–∞–∑–º–µ—Ä: {new FileInfo(transmittedWav).Length / 1024.0:F2} KB");

			// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
			var analyzerProject = Path.Combine(projectRoot, "..", "AudioAnalyzer.Tests", "AudioAnalyzer.Tests.csproj");
			_loggingService.LogInfo("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ...");

			var startInfo = new System.Diagnostics.ProcessStartInfo
			{
				FileName = "dotnet",
				Arguments = $"run --project \"{analyzerProject}\" -- \"{transmittedWav}\"",
				RedirectStandardOutput = true,
				RedirectStandardError = true,
				UseShellExecute = false,
				CreateNoWindow = true
			};

			using (var process = System.Diagnostics.Process.Start(startInfo))
			{
				if (process != null)
				{
					await process.WaitForExitAsync();

					if (process.ExitCode == 0)
					{
						_loggingService.LogInfo("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
					}
					else
					{
						_loggingService.LogError($"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞: {process.ExitCode})");
					}
				}
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
			if (File.Exists(transmittedJson))
			{
				_loggingService.LogInfo($"‚úÖ –°–æ–∑–¥–∞–Ω JSON: {Path.GetFileName(transmittedJson)}");

				// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º
				if (File.Exists(referenceJson))
				{
					CompareAudioCharacteristics(referenceJson, transmittedJson);
				}
				else
				{
					_loggingService.LogWarning($"‚ö† –≠—Ç–∞–ª–æ–Ω–Ω—ã–π JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: {Path.GetFileName(referenceJson)}");
				}
			}
			else
			{
				_loggingService.LogWarning($"‚ö† JSON –Ω–µ —Å–æ–∑–¥–∞–Ω: {Path.GetFileName(transmittedJson)}");
			}
		}
		catch (Exception ex)
		{
			_loggingService!.LogError($"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {ex.Message}", ex);
		}
	}

	/// <summary>
	/// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —ç—Ç–∞–ª–æ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
	/// </summary>
	private static void CompareAudioCharacteristics(string referenceJsonPath, string transmittedJsonPath)
	{
		try
		{
			_loggingService!.LogInfo("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
			_loggingService.LogInfo("‚ïë     –°–†–ê–í–ù–ï–ù–ò–ï –≠–¢–ê–õ–û–ù–ê –ò –ü–ï–†–ï–î–ê–ù–ù–û–ì–û –ê–£–î–ò–û                  ‚ïë");
			_loggingService.LogInfo("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

			var referenceJson = File.ReadAllText(referenceJsonPath);
			var transmittedJson = File.ReadAllText(transmittedJsonPath);

			var reference = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(referenceJson);
			var transmitted = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(transmittedJson);

			// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
			_loggingService.LogInfo("üìä –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:");
			CompareParameter("Sample Rate", reference, transmitted, "sampleRate");
			CompareParameter("Channels", reference, transmitted, "numChannels");
			CompareParameter("Bits Per Sample", reference, transmitted, "bitsPerSample");

			_loggingService.LogInfo("");
			_loggingService.LogInfo("‚ö† –ö–ê–ß–ï–°–¢–í–û –ò –ê–†–¢–ï–§–ê–ö–¢–´:");
			CompareParameter("Clipping %", reference, transmitted, "clippingPercentage");
			CompareParameter("Silent Frames %", reference, transmitted, "silentFramePercentage");

			_loggingService.LogInfo("");
			_loggingService.LogInfo("üìà –ê–ú–ü–õ–ò–¢–£–î–ê –ò –≠–ù–ï–†–ì–ò–Ø:");
			CompareParameter("RMS Amplitude", reference, transmitted, "rmsAmplitude");
			CompareParameter("Dynamic Range dB", reference, transmitted, "dynamicRangeDb");
			CompareParameter("Avg Energy", reference, transmitted, "avgEnergy");

			_loggingService.LogInfo("");
			_loggingService.LogInfo("üéµ –°–ü–ï–ö–¢–†–ê–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:");
			CompareParameter("Spectral Centroid", reference, transmitted, "spectralCentroid");
			CompareParameter("Avg Zero Crossing Rate", reference, transmitted, "avgZeroCrossingRate");

			// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
			AnalyzeQualityIssues(reference, transmitted);
		}
		catch (Exception ex)
		{
			_loggingService!.LogError($"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è JSON: {ex.Message}", ex);
		}
	}

	/// <summary>
	/// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ–∂–¥—É —ç—Ç–∞–ª–æ–Ω–æ–º –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∞—É–¥–∏–æ
	/// </summary>
	private static void CompareParameter(string name, System.Text.Json.JsonElement reference, System.Text.Json.JsonElement transmitted, string propertyName)
	{
		try
		{
			if (reference.TryGetProperty(propertyName, out var refValue) &&
			    transmitted.TryGetProperty(propertyName, out var transValue))
			{
				var refDouble = refValue.GetDouble();
				var transDouble = transValue.GetDouble();
				var diff = transDouble - refDouble;
				var diffPercent = refDouble != 0 ? (diff / refDouble) * 100 : 0;

				string indicator = Math.Abs(diffPercent) < 5 ? "‚úì" :
				                  Math.Abs(diffPercent) < 20 ? "‚ö°" : "‚ö†";

				_loggingService!.LogInfo($"   {indicator} {name,-25} –≠—Ç–∞–ª–æ–Ω: {refDouble,12:F2}  ‚Üí  –ü–µ—Ä–µ–¥–∞–Ω–æ: {transDouble,12:F2}  (Œî {diffPercent,6:F1}%)");
			}
		}
		catch
		{
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
		}
	}

	/// <summary>
	/// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
	/// </summary>
	private static void AnalyzeQualityIssues(System.Text.Json.JsonElement reference, System.Text.Json.JsonElement transmitted)
	{
		_loggingService!.LogInfo("");
		_loggingService.LogInfo("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
		_loggingService.LogInfo("‚ïë     –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ö–ê–ß–ï–°–¢–í–ê                     ‚ïë");
		_loggingService.LogInfo("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

		var issues = new List<string>();

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–ø–ø–∏–Ω–≥
		if (transmitted.TryGetProperty("clippingPercentage", out var clip))
		{
			var clipValue = clip.GetDouble();
			if (clipValue > 5)
			{
				issues.Add($"üî¥ –í–´–°–û–ö–ò–ô –ö–õ–ò–ü–ü–ò–ù–ì ({clipValue:F2}%)");
				_loggingService.LogInfo($"   ‚Üí –£–º–µ–Ω—å—à–∏—Ç–µ AmplificationFactor –≤ appsettings.json");
			}
			else if (clipValue > 1)
			{
				issues.Add($"üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–ª–∏–ø–ø–∏–Ω–≥ ({clipValue:F2}%)");
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
		if (reference.TryGetProperty("dynamicRangeDb", out var refDr) &&
		    transmitted.TryGetProperty("dynamicRangeDb", out var transDr))
		{
			var refDrValue = refDr.GetDouble();
			var transDrValue = transDr.GetDouble();
			var drLoss = refDrValue - transDrValue;

			if (drLoss > 20)
			{
				issues.Add($"üî¥ –ë–û–õ–¨–®–ê–Ø –ü–û–¢–ï–†–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –î–ò–ê–ü–ê–ó–û–ù–ê ({drLoss:F1} dB)");
				_loggingService.LogInfo($"   ‚Üí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ UseInterpolation=true");
				_loggingService.LogInfo($"   ‚Üí –£–≤–µ–ª–∏—á—å—Ç–µ AmplificationFactor");
			}
			else if (drLoss > 10)
			{
				issues.Add($"üü° –ü–æ—Ç–µ—Ä—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({drLoss:F1} dB)");
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
		if (reference.TryGetProperty("avgEnergy", out var refEnergy) &&
		    transmitted.TryGetProperty("avgEnergy", out var transEnergy))
		{
			var refEnergyValue = refEnergy.GetDouble();
			var transEnergyValue = transEnergy.GetDouble();
			var energyLoss = ((refEnergyValue - transEnergyValue) / refEnergyValue) * 100;

			if (energyLoss > 50)
			{
				issues.Add($"üî¥ –ë–û–õ–¨–®–ê–Ø –ü–û–¢–ï–†–Ø –≠–ù–ï–†–ì–ò–ò –°–ò–ì–ù–ê–õ–ê ({energyLoss:F1}%)");
				_loggingService.LogInfo($"   ‚Üí –£–≤–µ–ª–∏—á—å—Ç–µ AmplificationFactor –¥–æ 1.5-2.0");
			}
		}

		if (issues.Count == 0)
		{
			_loggingService.LogInfo("   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ");
		}
		else
		{
			_loggingService.LogInfo($"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {issues.Count}");
			foreach (var issue in issues)
			{
				_loggingService.LogInfo($"   {issue}");
			}
		}

		_loggingService.LogInfo("");
		_loggingService.LogInfo("üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ appsettings.json:");
		_loggingService.LogInfo("   - SignalProcessing.AmplificationFactor");
		_loggingService.LogInfo("   - Experimental.UseInterpolation");
		_loggingService.LogInfo("   - Experimental.UseAntiAliasing");
	}
}